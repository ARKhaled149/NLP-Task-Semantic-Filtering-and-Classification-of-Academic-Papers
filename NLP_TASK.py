# -*- coding: utf-8 -*-
"""NLP-Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pd-uiZv0r_TRx0kzlzvKLQvvTQ2jsT3h
"""

from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import re  # Import the re module for regular expressions
import matplotlib.pyplot as plt

# Download NLTK data files
nltk.download('punkt')
nltk.download('stopwords')

# Load the full dataset
data = pd.read_csv('/content/drive/MyDrive/NLP Task/collection_with_abstracts.csv', sep=',')  # Adjust separator if needed
print("Data loaded successfully.")
data.head()  # Display the first few rows

# Define a function to check for deep learning keywords
def contains_deep_learning(text):
    deep_learning_keywords = ['deep learning', 'neural network', 'cnn', 'rnn', 'lstm', 'transformer']
    if isinstance(text, str):
        text = text.lower()
        return any(keyword in text for keyword in deep_learning_keywords)
    return False

# Filter papers that mention deep learning methods
data['is_relevant'] = data['Abstract'].apply(contains_deep_learning)
relevant_papers = data.loc[data['is_relevant']].copy()  # Use .copy() to avoid warnings
print(f"Number of relevant papers: {len(relevant_papers)}")

# Define a function to classify the method used
def classify_method(text):
    text = text.lower()
    if 'text mining' in text and 'computer vision' in text:
        return 'both'
    elif 'text mining' in text:
        return 'text mining'
    elif 'computer vision' in text:
        return 'computer vision'
    else:
        return 'other'

# Apply classification using .loc to avoid SettingWithCopyWarning
relevant_papers.loc[:, 'method_type'] = relevant_papers['Abstract'].apply(classify_method)

# Define a function to extract method names
def extract_method_name(text):
    method_pattern = re.compile(r'\b(?:cnn|rnn|lstm|transformer)\b', re.IGNORECASE)
    methods = method_pattern.findall(text)
    return ', '.join(set(methods))

# Apply method extraction
relevant_papers.loc[:, 'methods'] = relevant_papers['Abstract'].apply(extract_method_name)

# Display the first few rows with extracted methods
relevant_papers.head()

# Save the processed data to a new CSV file
relevant_papers.to_csv('/content/drive/MyDrive/NLP Task/relevant_papers.csv', index=False)
print("Relevant papers saved successfully.")